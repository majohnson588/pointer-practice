#include <stdioi.h>
int main()
{
    //整形数组
    
    //数组名是什么呢？
    //数组名通常来说是数组首元素的地址
    //但是有两个例外：
    //1.sizeof（数组名），这里的数组名表示整个数组，计算的是整个数组的大小
    //2.&数组名，这里的数组名表示整个数组，取出的是整个数组的地址
    
    int a[] = ( 1,2,3,4 );
    //          0 1 2 3
    int (*p)[4] = &a;
    printf("%d\n",sizeof(a));//4*4=16
    printf("%d\n",sizeof(a + 0));//4/8 a+0是数组第一个元素的地址，是地址，大小就是4/8个字节
    printf("%d\n",sizeof(*a));//4 a表示数组首元素的地址，*a表示数组的第一个元素，sizeof(*a)就是第一个元素的大小-4
    printf("%d\n",sizeof(a + 1));//4/8 a表示数组元素的地址，a+1数组第二个元素的地址，sizeof(a+1)就是第二个元素的大小
    printf("%d\n",sizeof(a[1]));//4 计算的是第二个元素的大小
    printf("%d\n",sizeof(&a));//4/8 &a取出的是数组的地址，数组的地址也是地址呀，是地址就是4/8字节
    printf("%d\n",sizeof(*&a));//16 计算的是整个数组的大小
    printf("%d\n",sizeof(&a + 1));//4/8 - &a是数组的地址，+1跳过整个数组，产生的数4后边位置的地址
    printf("%d\n",sizeof(&a[0]));//4/8 取出的数组第一个元素的地址
    printf("%d\n",sizeof(&a[0] + 1));//4/8 数组第二个元素的地址
    
    //字符数组
    char arr[] = { 'a','b','c','d','e','f' };
    printf("%llu\n", sizeof(arr));//6
    printf("%llu\n", sizeof(arr + 0));//4/8 arr + 0是数组首元素的地址
    printf("%llu\n", sizeof(*arr));//1 - *arr是首元素，首元素是一个字符，大小是一个字节
    printf("%llu\n", sizeof(arr[1]));//1 - arr[1]是数组的第二个元素，大小是1个字节
    printf("%llu\n", sizeof(&arr);//4/8 &arr是数组的地址
    printf("%llu\n", sizeof(&arr + 1));//4/8 &arr + 1是从数组地址开始向后跳过了整个数组产生的一个地址
    printf("%llu\n", sizeof(&arr[0] + 1));//4/8 &arr[0] + 1 是数组第二个元素的地址
    //%llu = long long unsigned(在64位平台正常运行)
    
    printf("%d\n",strlen(arr));//随机值，arr数组中没有\0,所以strlen函数会继续往后找\0,统计\0之前出现的字符个数
    printf("%d\n",strlen(arr + 0));//随机值，arr+0还是数组首元素的地址
    //printf("%d\n",strlen(*arr);//err - arr是数组首元素的地址，*arr是数组的首元素，'a'-97
    //printf("%d\n",strlen(arr[1]);//err - 'b' - 98
    printf("%d\n",strlen(&arr);//随机值
    printf("%d\n",strlen(&arr + 1);//随机值
    printf("%D\n",strlen(&arr[0] + 1));//随机值
    
    char*p = "abcdef";
    
    printf("%d\n", strlen(p));//6
    printf("%d\n", strlen(p + 1));//5 从b的位置开始向后数字符
    printf("%d\n", strlen(*p));//err
    printf("%d\n", strlen(p[0]));//err
    printf("%d\n", strlen(&p));//随机值
    printf("%d\n", strlen(&p + 1));//随机值
    printf("%d\n", strlen(&p[0] + 1));//5 从b的位置往后数字符
    
    printf("%d\n", sizeof(p));//4/8 p是指针变量，计算的是指针变量的大小
    printf("%d\n", sizeof(p + 1));//4/8 p+1是‘b’的地址
    printf("%d\n", sizeof(*p));//1 - *p其实就是'a'
    printf("%d\n", sizeof(p[0]));1 - p[0]->*(p+0)->*p
    printf("%d\n", sizeof(&p));//4/8 &p 是指针变量p在内存中的地址
    printf("%d\n", sizeof(&p + 1));//4/8 - &p+1是跳过p之后的地址
    printf("%d\n", sizeof(&p[0] + 1));//4/8 &p[0]是'a'的地址，&p[0]+1就是b的地址
    
    //二维数组
    //
    int a[3][4] = { 0 };
    printf("%d\n", sizeof(a));//计算的是整个数组的大小，单位是字节3*4*4 = 48
    printf("%d\n", sizeof(a[0][0]));//4 第一行第1个元素的大小
    printf("%d\n", sizeof(a[0]));//4*4 - a[0]是第一行的数组名，sizeof(a[0])就是第一行的数组名单独放在sizeof内部，计算的是第一行的大小
    printf("%d\n", sizeof(a[0] + 1));4/8 a[0]作为第一行的数组名，并没有单独放在sizeof内部，也没有被取地址
    //所以a[0]就是数组首元素的地址，就是第一行第一个元素的地址，a[0]+1就是第一行第一个元素的地址，a[0]+1就是第一行第二个元素的地址
    
    printf("%d\n",sizeof(*(a[0]+ 1)));//4 - (*(a[0] + 1))表示的是第一行第二个元素
    printf("%d\n",sizeof(a + 1));//a表示首元素的地址，a是二维数组，首元素的地址就是第一行的地址
    //所以a表示的是二维数组第一行的地址，a+1就是第二行的地址
    printf("%d\n",sizeof(*(a + 1)));//16 对第二行的地址解引用访问到就是第二行
    //*(a+1) -> a[1]
    //sizeof(a[1])
    //
    printf("%d\n",sizeof(&a[0] + 1));//a[0]是第一行的数组名，&a[0]取出的就是第一行的地址
    //&a[0[ + 1 就是第二行的地址
    
    printf("%d\n",sizeof(*(&a[0] + 1)));//16 - 对第二行的地址解引用访问到就是第二行
    printf("%d\n",sizeof(*a));//16 - a就是首元素的地址，就是第一行的地址，*a就是第一行
    //*a - > *(a+0) - > a[0]
    
    printf("%d\n", sizeof(a[3]));//16 int [4](地址无效，但不妨碍sizeof根据类型计算大小)
    
    //int a = 10;
    //printf("%d\n", sizeof(a));//4
    //printf("%d\n", sizeof(int);//4
    
    return 0;
}

Practice1：
int main()
{
    int a[5] = { 1,2,3,4,5 };
    int* ptr = (int*)(&a + 1);//取出整个数组的地址+1
    printf("%d %d", *(a + 1), *(ptr - 1)):
    return 0;
}
output
2 5

Practice2:
struct Test
{
   int num;
   char* pcName;
   short sDate;
   char cha[2];
   short sBa[4];
}*p;
//假设p的值为0x100000， 如下表表达式的值分别为多少？
//已知，结构体Test类型的变量大小是20个字节，系统为x86环境
int main()
{
    p = (struct Test*)0x100000;
    printf("%p\n", p + 0x1);//"+1"就是+20
    printf("%p\n", (unsigned long)p + 0x1);//强制类型转换为整形，"+1"就是加一个字节
    printf("%p\n", (unsigned int*)p + 0x1);//强制类型转换为指针，"+1"就是加四个字节
    return 0;
}

Practice3:
int main()
{
    int a[4] = { 1,2,3,4 };
    int* ptr1 = (int*)(&a + 1);
    int* ptr2 = (int*)((int)a + 1);
    printf("%x %x", ptr1[-1], *ptr2);//%x只打印16进制有效位，ptr1[-1]等效于*(ptr1-1)
    //假设是小端：
    a
    01 00 00 00|02 00 00 00|03 00 00 00|04 00 00 00
      ^
      |
      ptr2开始解引用
    return 0;
}
output:
4 2000000

Practice4:
#include <stdio.h>
int main()
{
    int a[3][2] = { (0,1), (2,3), (4,5) };//这个是逗号表示式，并非初始化（大括号）
    //实际存放情况如下
     0  1
  0  1  3
  1  5  0
  2  0  0
    int* p;
    p = a[0];
    printf("%d", p[0]);
    return 0;
}
output:
1

Practice5:
{
    int a[5][5];
    int(*p)[4];
    p = a;
    printf("&p,%d\n", &p[4][2] - &a[4][2], &p[4][2] - &a[4][2]);
    return 0;
}
output:
4,FFFFFFFC

Peactice6:
#include <stdio.h>
int main()
{
    int aa[2][5] = { 1,2,3,4,5,6,7,8,9,10 };
    
    int* ptr1 = (int*)(&aa + 1);//&aa取出的是整个二维数组,+1跳过整个二维数组
    int* ptr2 = (int*)(*(aa + 1));//aa为首行地址，aa+1为第二行地址
    
    printf("%d,%d", *(ptr1 - 1), *(ptr2 - 1));
    return 0;
}
output:
10，5

Practice7:
int main()
{
    char* a[] = { "work","at","alibaba" };//实际上字符指针存的是“w”，“a”，“a”
    char** pa = a;
    pa++;
    printf("%s\n", *pa);//给的是首字母地址，可以打印一个字符串
    return 0;
}
output:
at

Practice8:
int main()
{
    char* c[] = { "ENTER","NEW","POINT","FIRST" };
    char** cp[] = { c + 3,c + 2,c + 1,c };
    char*** cpp = cp;
    
    printf("%s\n", **++cpp);
    printf("%s\n",*-- * ++cpp + 3);//先算"++"再算*，后算“--”最后+3
    printf("%s\n",*cpp[-2] + 3);
    printf("%s\n", cpp[-1][-1] + 1);
    
    return 0;
}
output:
POINT
ER
ST
EW
