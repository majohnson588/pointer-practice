#include <stdioi.h>
int main()
{
    //整形数组
    int a[] = ( 1,2,3,4 );
    //          0 1 2 3
    int (*p)[4] = &a;
    printf("%d\n",sizeof(a));//4*4=16
    printf("%d\n",sizeof(a + 0));//4/8 a+0是数组第一个元素的地址，是地址，大小就是4/8个字节
    printf("%d\n",sizeof(*a));//4 a表示数组首元素的地址，*a表示数组的第一个元素，sizeof(*a)就是第一个元素的大小-4
    printf("%d\n",sizeof(a + 1));//4/8 a表示数组元素的地址，a+1数组第二个元素的地址，sizeof(a+1)就是第二个元素的大小
    printf("%d\n",sizeof(a[1]));//4 计算的是第二个元素的大小
    printf("%d\n",sizeof(&a));//4/8 &a取出的是数组的地址，数组的地址也是地址呀，是地址就是4/8字节
    printf("%d\n",sizeof(*&a));//16 计算的是整个数组的大小
    printf("%d\n",sizeof(&a + 1));//4/8 - &a是数组的地址，+1跳过整个数组，产生的数4后边位置的地址
    printf("%d\n",sizeof(&a[0]));//4/8 取出的数组第一个元素的地址
    printf("%d\n",sizeof(&a[0] + 1));//4/8 数组第二个元素的地址
    
    //字符数组
    char arr[] = { 'a','b','c','d','e','f' };
    printf("%llu\n", sizeof(arr));//6
    printf("%llu\n", sizeof(arr + 0));//4/8 arr + 0是数组首元素的地址
    printf("%llu\n", sizeof(*arr));//1 - *arr是首元素，首元素是一个字符，大小是一个字节
    printf("%llu\n", sizeof(arr[1]));//1 - arr[1]是数组的第二个元素，大小是1个字节
    printf("%llu\n", sizeof(&arr);//4/8 &arr是数组的地址
    printf("%llu\n", sizeof(&arr + 1));//4/8 &arr + 1是从数组地址开始向后跳过了整个数组产生的一个地址
    printf("%llu\n", sizeof(&arr[0] + 1));//4/8 &arr[0] + 1 是数组第二个元素的地址
    //%llu = long long unsigned(在64位平台正常运行)
    
    printf("%d\n",strlen(arr));//随机值，arr数组中没有\0,所以strlen函数会继续往后找\0,统计\0之前出现的字符个数
    printf("%d\n",strlen(arr + 0));//随机值，arr+0还是数组首元素的地址
    //printf("%d\n",strlen(*arr);//err - arr是数组首元素的地址，*arr是数组的首元素，'a'-97
    //printf("%d\n",strlen(arr[1]);//err - 'b' - 98
    printf("%d\n",strlen(&arr);//随机值
    printf("%d\n",strlen(&arr + 1);//随机值
    printf("%D\n",strlen(&arr[0] + 1));//随机值
    return 0;、
}
